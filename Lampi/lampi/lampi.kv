#:kivy 1.9
#:import hsv_to_rgb colorsys.hsv_to_rgb
#:import rgb_to_hsv colorsys.rgb_to_hsv
#:import Factory kivy.factory.Factory

#:include lampi/controls/gradient_slider.kv
#:include lampi/controls/lampi_toggle.kv
#:include lampi/controls/color_box.kv
#:include lampi/colors.kv

<Preset@Popup>:
  auto_dismiss: False
  title: str(app.preset)
  BoxLayout:
    orientation: 'vertical'
    BoxLayout:
      orientation: 'vertical'
      size_hint_y: 0.8
      ColorBox:
        id: preset_button_hue
        # size_hint_y: 0.6
        color: hsv_to_rgb(app.preset_temp, 1.0, 1.0)
      GradientSlider:
        id: preset_hue_slider
        size_hint_y: 0.22
        colors: red, yellow, green, cyan, blue, magenta, red
        value: app.preset_color
        on_value: app.preset_temp = self.value_normalized
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: 0.2
      Button:
        text: 'Save'
        on_release:
          app.preset_color = app.preset_temp
          app.write_preset(app.preset)
          root.dismiss()
      Button:
        text: 'Cancel'
        on_release:
          app.preset_temp = app.preset_color
          root.dismiss()

TabbedPanel:

  do_default_tab: False

  TabbedPanelItem:
    text: 'LED Controls'
    BoxLayout:
      canvas.before:
        Color:
          rgba: offwhite if app.lamp_is_on else black
        Rectangle:
          pos: self.pos
          size: self.size
      orientation: 'vertical'
      BoxLayout:
        orientation: 'vertical'
        padding: 30
        size_hint_y: 0.66
        # hue
        GradientSlider:
          id: hue_slider
          size_hint_y: 0.33
          colors: red, yellow, green, cyan, blue, magenta, red
          value: app.hue
          on_value: app.hue = self.value_normalized
        # saturation
        GradientSlider:
          id: saturation_slider
          size_hint_y: 0.33
          colors: white, hsv_to_rgb(app.hue, 1.0, 1.0)
          value: app.saturation
          on_value: app.saturation = self.value_normalized
        # brightness
        GradientSlider:
          id: brightness
          size_hint_y: 0.33
          colors: (0, 0, 0, 1), (1, 1, 1, 1)
          thumb_image_light: 'images/brightness_icon_light_small.png'
          thumb_image_dark: 'images/brightness_icon_dark_small.png'
          value: app.brightness
          on_value: app.brightness = self.value_normalized
      BoxLayout:
        orientation: 'vertical'
        size_hint_y: 0.33
        ColorBox:
          id: button_hue
          size_hint_y: 0.1
          color: hsv_to_rgb(app.hue, app.saturation, 1.0)
        LampiToggle:
          id: button_onoff
          size_hint_y: 0.90
          image: 'images/power_icon_light.png'
          accent_color: hsv_to_rgb(hue_slider.value, saturation_slider.value, 1.0)
          text: ''
          state: 'down' if app.lamp_is_on else 'normal'
          on_state:  app.lamp_is_on = True if self.state == 'down' else False

  # Presets
  TabbedPanelItem:
    text: 'Presets'
    BoxLayout:
      orientation: 'vertical'
      Button:
        text: 'Preset 1'
        on_press: 
          Factory.Preset().open()
          app.preset = 1
        # on_state:
        #   print("preset 1")
      # Button:
      #   text: 'Preset 2'
      #   on_press: 
      #     Factory.Preset().open()
      #     app.preset = 2
      #   # on_state:
      #   #   print("preset 2")
      # Button:
      #   text: 'Preset 3'
      #   on_press: 
      #     Factory.Preset().open()
      #     app.preset = 3
      #   # on_state:
      #   #   print("preset 3")

  # Remotes
  TabbedPanelItem:
    text: 'Remotes'
    BoxLayout:
      Label:
        text: 'Remotes here'
